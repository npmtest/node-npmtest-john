{"/home/travis/build/npmtest/node-npmtest-john/test.js":"/* istanbul instrument in package npmtest_john */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-john/lib.npmtest_john.js":"/* istanbul instrument in package npmtest_john */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_john = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_john = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-john/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-john && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_john */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_john\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_john.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_john.rollup.js'] =\n            local.assetsDict['/assets.npmtest_john.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_john.__dirname + '/lib.npmtest_john.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-john/node_modules/john/index.js":"'use strict';\n\nconst path = require('path');\nconst helpers = require('./lib/helpers');\nconst readPkgUp = require('read-pkg-up');\nconst platform = process.platform.toLowerCase();\nconst supportedPlatforms = require('./package').os;\n\nconst defaultOpts = {\n  clear: false,\n  // OSX options\n  dependencyColor: 'blue',\n  devDependencyColor: 'yellow',\n  // Windows options\n  dependencyHidden: false,\n  devDependencyHidden: false\n};\n\nmodule.exports = (projectPath, opts) => {\n  let modulesPath;\n  const findRootPackage = () =>\n    readPkgUp({cwd: projectPath}).then(pkg => {\n      if (!pkg.pkg) {\n        return Promise.reject(new Error(`couldn't find package.json in ${projectPath}`));\n      }\n      projectPath = path.dirname(pkg.path);\n      modulesPath = path.join(projectPath, 'node_modules');\n      return pkg.pkg;\n    });\n\n  return (function main() {\n    if (supportedPlatforms.indexOf(platform) === -1) {\n      return Promise.reject(new Error(`${platform} unsupported, supported platforms: ${supportedPlatforms}`));\n    }\n\n    const platformLib = require(`./lib/${platform}`);\n\n    if (typeof projectPath !== 'string') {\n      return Promise.reject(new TypeError('projectPath path should be a string'));\n    }\n\n    opts = Object.assign({}, defaultOpts, opts || {});\n\n    if (typeof platformLib.handleOptions === 'function') {\n      opts = platformLib.handleOptions(opts);\n    }\n\n    if (typeof platformLib.performPreAction !== 'function') {\n      platformLib.performPreAction = () => Promise.resolve();\n    }\n\n    return findRootPackage()\n      .then(rootPackage =>\n        platformLib.performPreAction(projectPath, opts)\n          .then(() =>\n            Promise.all([\n              helpers.getDeps(modulesPath, rootPackage.dependencies),\n              helpers.getDeps(modulesPath, rootPackage.devDependencies)\n            ]).then(deps =>\n              Promise.all([\n                platformLib.performAction('dependencies', deps[0], opts),\n                platformLib.performAction('devDependencies', deps[1], opts)\n              ])\n            ).then(affectedDeps => ({\n              dependencies: affectedDeps[0],\n              devDependencies: affectedDeps[1]\n            }))\n          )\n      );\n  })();\n};\n","/home/travis/build/npmtest/node-npmtest-john/node_modules/john/lib/helpers.js":"const pify = require('pify');\nconst path = require('path');\nconst stat = pify(require('fs').stat);\n\n/**\n * Convert object to array (or pass-through is already array)\n * @param  {Array|Object} arr\n * @return {Array} arr\n */\nconst toArray = arr =>\n  Array.isArray(arr) ? arr : Object.keys(arr || {});\n\n/**\n * get path and module name for each dependency\n * @param  {String} modulePath path to `node_modules`\n * @param  {Array|Object} deps\n * @return {Array<Object>} deps\n */\nconst getDepPaths = (modulePath, deps) =>\n  toArray(deps).map(dep => ({\n    path: path.join(modulePath, dep),\n    module: dep\n  }));\n\n/**\n * check if `dep.path` exists and is directory otherwise return false\n * @param  {Array<Object>} deps\n * @return {Promise.<Array.<Object|Boolean>>}\n */\nconst checkDeps = deps =>\n  deps.map(dep =>\n    stat(dep.path)\n      // Check if dep.path is directory\n      .then(stats => stats.isDirectory() && dep)\n      // Catch handles dependencies that are not installed\n      .catch(() => false)\n  );\n\n/**\n * remove dependencies that are falsy\n * @param  {Promise.<Array.<Object|Boolean>>} deps\n * @return {Promise.<Array.<Object>>}\n */\nconst filterDeps = deps =>\n  // Filter out `deps` with value `false`\n  Promise.all(deps).then(resolvedDeps => resolvedDeps.filter(dep => Boolean(dep)));\n\n/**\n * get dependency paths and filter out invalid paths\n * @param  {String}  module  Path path to `node_modules` dir\n * @param  {Array|Object} deps\n * @return {Promise.<Array.<Object>>}\n */\nconst getDeps = (modulePath, deps) =>\n  filterDeps(checkDeps(getDepPaths(modulePath, deps)));\n\nmodule.exports = {\n  filterDeps,\n  getDeps,\n  getDepPaths\n};\n","/home/travis/build/npmtest/node-npmtest-john/node_modules/john/cli.js":"#!/usr/bin/env node\n'use strict';\n\nconst meow = require('meow');\nconst john = require('./');\nconst platform = process.platform.toLowerCase();\nconst supportedPlatforms = require('./package').os;\n\n(function () {\n  if (supportedPlatforms.indexOf(platform) === -1) {\n    return console.error(new Error(`${platform} unsupported, supported platforms: ${supportedPlatforms}`));\n  }\n  const platformLib = require(`./lib/${platform}`);\n\n  const cli = meow(\n    platformLib.cliHelpText(),\n    typeof platformLib.cliOptions === 'function' ? platformLib.cliOptions() : {}\n  );\n\n  john(process.cwd(), cli.flags).then(\n    deps => {\n      platformLib.cliLog(deps, 'dependencies');\n      console.log();\n      platformLib.cliLog(deps, 'devDependencies');\n    }\n  );\n})();\n","/home/travis/build/npmtest/node-npmtest-john/node_modules/john/lib/darwin.js":"'use strict';\n\nconst tag = require('finder-tag');\nconst chalk = require('chalk');\n\n/**\n * Set colors to `clear` if the clear option is Set\n * @param  {Object} opts\n * @return {Object} opts\n */\nconst handleOptions = opts => {\n  if (opts.clear) {\n    opts.dependencyColor = opts.devDependencyColor = 'clear';\n  }\n  return opts;\n};\n\n/**\n * Tag dependency folders with colors\n * @param  {String} depType 'dependencies' or 'devDependencies'\n * @param  {Array.<Object>} deps\n * @param  {Object} opts\n * @return {Promise.<Array.<Object>>}\n */\nconst performAction = (depType, deps, opts) => {\n  // tag dependency directories with corresponding color\n  const depTypeSingular = `${depType.slice(0, -3)}y`;\n  const color = opts[`${depTypeSingular}Color`];\n\n  return Promise.all(deps.map(dep =>\n    tag(dep.path, color)\n      .then(data => {\n        data.module = dep.module;\n        return data;\n      })\n  ));\n};\n\n/**\n * CLI output to the user\n * @param  {Array.<Object>} deps\n * @param  {String} depType 'dependencies' or 'devDependencies'\n */\nconst cliLog = (deps, depType) => {\n  const terminalColor = color => chalk[color] ? chalk[color](color) : color;\n\n  deps = deps[depType];\n  if (!deps.length) {\n    return console.log(`No ${depType} found.`);\n  }\n  const color = deps[0].tag;\n\n  const logRemove = `Removed tags from ${depType}:`;\n  const logNormal = `Tagged ${deps.length} ${depType} as ${terminalColor(color)}:`;\n  console.log(color === 'clear' ? logRemove : logNormal);\n\n  deps.forEach(dep => console.log(`  - ${dep.module}`));\n};\n\n/**\n * Output the CLI helper text for OS X\n */\nconst cliHelpText = () =>\n  [\n    'Usage',\n    '  $ john',\n    '',\n    'Options',\n    '  --clear     Clear all tags. [Default: false]',\n    '  --deps      Color for dependencies. [Default: blue]',\n    '  --dev-deps  Color for devDependencies. [Default: yellow]',\n    '',\n    'Examples',\n    '  $ john',\n    '  Tagged 4 dependencies as blue',\n    '  Tagged 2 devDependencies as yellow',\n    '',\n    '  $ john --clear',\n    '  Removed 4 tags from dependencies',\n    '  Removed 2 tags from devDependencies',\n    '',\n    '  $ john --deps=purple --dev-deps=gray',\n    '  Tagged 4 dependencies as purple',\n    '  Tagged 2 devDependencies as gray'\n  ];\n\n/**\n * Defines the OS X CLI options\n */\nconst cliOptions = () =>\n  ({\n    alias: {\n      dep: 'dependencyColor',\n      devDep: 'devDependencyColor',\n      deps: 'dependencyColor',\n      devDeps: 'devDependencyColor'\n    }\n  });\n\nmodule.exports = {\n  handleOptions,\n  performAction,\n  cliHelpText,\n  cliOptions,\n  cliLog\n};\n","/home/travis/build/npmtest/node-npmtest-john/node_modules/john/lib/win32.js":"'use strict';\n\nconst pify = require('pify');\nconst fs = require('fs');\nconst path = require('path');\nconst helpers = require('./helpers');\nconst readdir = pify(fs.readdir);\nconst writeFile = pify(fs.writeFile);\nconst fswin = require('fswin');\n\n/**\n * Modify options object as needed for Windows\n * @param opts Object\n * @returns Object\n */\nconst handleOptions = opts => {\n  // Convert any CLI params to boolean\n  Object.keys(opts).forEach(key => {\n    const val = opts[key];\n    if (typeof val === 'string') {\n      opts[key] = opts[key] === 'true';\n    }\n  });\n\n  if (opts.clear) {\n    opts.dependencyHidden = opts.devDependencyHidden = false;\n  }\n  return opts;\n};\n\n/**\n * Sets the value of the `hidden` attribute on dependency paths\n * @param deps Object\n * @param hidden Boolean\n * @returns {Promise}\n */\nconst setHiddenAttr = (deps, hidden) =>\n  Promise.all(\n    deps.map(dep =>\n      fswin.setAttributesSync(dep.path, {IS_HIDDEN: hidden}) ?\n        Promise.resolve(Object.assign(dep, {hidden})) :\n        Promise.reject(new Error(`Failed to modify dir attr: ${dep.path}`))\n    )\n  );\n\n/**\n * This hides all the dependencies first and writes the info file\n * @param projectPath String\n * @param opts Object\n * @returns {Promise}\n */\nconst performPreAction = (projectPath, opts) => {\n  const modules = path.join(projectPath, 'node_modules');\n  const hidden = typeof opts.clear === 'boolean' ? !opts.clear : true;\n\n  const writeTextFile = writeFile(\n    path.join(modules, 'modules_hidden.txt'),\n    'You\\'ve hidden modules with `john` - https://github.com/davej/john',\n    {flags: 'w'}\n  );\n\n  return writeTextFile\n    .then(() => readdir(modules))\n    .then(files => helpers.getDeps(modules, files))\n    .then(deps => setHiddenAttr(deps, hidden));\n};\n\n/**\n * Determine whether to hide or show the passed in type of dependencies\n * @param depType String\n * @param deps Object\n * @param opts Object\n * @returns {Promise}\n */\nconst performAction = (depType, deps, opts) => {\n  const depTypeSingular = `${depType.slice(0, -3)}y`;\n  const hidden = opts[`${depTypeSingular}Hidden`];\n\n  return setHiddenAttr(deps, hidden);\n};\n\n/**\n * CLI output to the user\n * @param deps Object\n * @param depType String\n */\nconst cliLog = (deps, depType) => {\n  deps = deps[depType];\n  if (deps.length) {\n    const hidden = deps[0].hidden;\n    const logShow = `Unhid ${depType}:`;\n    const logHide = `Hid ${deps.length} ${depType}:`;\n    console.log(hidden ? logHide : logShow);\n\n    deps.forEach(dep => console.log(`  - ${dep.module}`));\n  } else {\n    console.log(`No ${depType} found.`);\n  }\n};\n\n/**\n * Output the helper text for using john in Windows\n */\nconst cliHelpText = () =>\n  [\n    'Usage',\n    '  > john',\n    '',\n    'Options',\n    '  --clear     Clear all hidden dependencies. [Default: false]',\n    '  --deps      Hide dependencies. [Default: false]',\n    '  --dev-deps  Hide devDependencies. [Default: false]',\n    '',\n    'Examples',\n    '  $ john',\n    '  Hid 4 dependencies',\n    '',\n    '  $ john --clear',\n    '  Unhid 4 dependencies'\n  ];\n\n/**\n * Defines the Windows options for john\n */\nconst cliOptions = () =>\n  ({\n    alias: {\n      dep: 'dependencyHidden',\n      devDep: 'devDependencyHidden',\n      deps: 'dependencyHidden',\n      devDeps: 'devDependencyHidden'\n    }\n  });\n\nmodule.exports = {\n  handleOptions,\n  performPreAction,\n  performAction,\n  cliHelpText,\n  cliOptions,\n  cliLog\n};\n"}